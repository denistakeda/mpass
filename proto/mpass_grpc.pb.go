// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/mpass.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MpassService_SignUp_FullMethodName     = "/pb.MpassService/SignUp"
	MpassService_SignIn_FullMethodName     = "/pb.MpassService/SignIn"
	MpassService_AddRecords_FullMethodName = "/pb.MpassService/AddRecords"
	MpassService_AllRecords_FullMethodName = "/pb.MpassService/AllRecords"
)

// MpassServiceClient is the client API for MpassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MpassServiceClient interface {
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	AddRecords(ctx context.Context, in *AddRecordsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AllRecords(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AllRecordsResponse, error)
}

type mpassServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMpassServiceClient(cc grpc.ClientConnInterface) MpassServiceClient {
	return &mpassServiceClient{cc}
}

func (c *mpassServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, MpassService_SignUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpassServiceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, MpassService_SignIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpassServiceClient) AddRecords(ctx context.Context, in *AddRecordsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, MpassService_AddRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpassServiceClient) AllRecords(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AllRecordsResponse, error) {
	out := new(AllRecordsResponse)
	err := c.cc.Invoke(ctx, MpassService_AllRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MpassServiceServer is the server API for MpassService service.
// All implementations must embed UnimplementedMpassServiceServer
// for forward compatibility
type MpassServiceServer interface {
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	AddRecords(context.Context, *AddRecordsRequest) (*empty.Empty, error)
	AllRecords(context.Context, *empty.Empty) (*AllRecordsResponse, error)
	mustEmbedUnimplementedMpassServiceServer()
}

// UnimplementedMpassServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMpassServiceServer struct {
}

func (UnimplementedMpassServiceServer) SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedMpassServiceServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedMpassServiceServer) AddRecords(context.Context, *AddRecordsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecords not implemented")
}
func (UnimplementedMpassServiceServer) AllRecords(context.Context, *empty.Empty) (*AllRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllRecords not implemented")
}
func (UnimplementedMpassServiceServer) mustEmbedUnimplementedMpassServiceServer() {}

// UnsafeMpassServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MpassServiceServer will
// result in compilation errors.
type UnsafeMpassServiceServer interface {
	mustEmbedUnimplementedMpassServiceServer()
}

func RegisterMpassServiceServer(s grpc.ServiceRegistrar, srv MpassServiceServer) {
	s.RegisterService(&MpassService_ServiceDesc, srv)
}

func _MpassService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpassServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MpassService_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpassServiceServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MpassService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpassServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MpassService_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpassServiceServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MpassService_AddRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpassServiceServer).AddRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MpassService_AddRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpassServiceServer).AddRecords(ctx, req.(*AddRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MpassService_AllRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpassServiceServer).AllRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MpassService_AllRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpassServiceServer).AllRecords(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MpassService_ServiceDesc is the grpc.ServiceDesc for MpassService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MpassService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MpassService",
	HandlerType: (*MpassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _MpassService_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _MpassService_SignIn_Handler,
		},
		{
			MethodName: "AddRecords",
			Handler:    _MpassService_AddRecords_Handler,
		},
		{
			MethodName: "AllRecords",
			Handler:    _MpassService_AllRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mpass.proto",
}
